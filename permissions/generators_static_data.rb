
def camel_to_pascal(camel)
	return camel[0].chr.upcase + camel[1..-1]
end

def camel_to_snake(camel)
	camel.gsub(/([^A-Z])([A-Z]{1})/, '\1_\2')
end

def spaced_to_pascal(spaced)
	result = ''
	spaced.split(' ').each { |term|
		term = term[0].chr.upcase + term[1..-1]
		result = result + term;
	}
	return result
end

cpp_otaku_template = <<END
#pragma once
// ======================
// DO NOT EDIT THIS FILE!
// ======================
//
// This code was generated by the permissions_generator.rb script.
// Should you wish to add a new IMQS V8 permission, follow the instructions
// to regenerate this class at:
//
// https://imqssoftware.atlassian.net/wiki/display/ASC/Generating+Permissions

enum ImqsAuthPermBits {
	// These are generated by /InfrastructureBuild/auth/permissions/permissions_generator.rb

ENUMS

};
END

cpp_aries_template = <<END
#pragma once
// ======================
// DO NOT EDIT THIS FILE!
// ======================
//
// This code was generated by the permissions_generator.rb script.
// Should you wish to add a new IMQS V8 permission, follow the instructions
// to regenerate this class at:
//
// https://imqssoftware.atlassian.net/wiki/display/ASC/Generating+Permissions

namespace imqs {
namespace auth {

enum class PermBits {
	// These are generated by /InfrastructureBuild/auth/permissions/permissions_generator.rb
	
ENUMS

};

} // namespace auth
} // namespace imqs
END

java_template = <<END
package za.co.imqs.common.security;

/**
 * =======================
 * DO NOT EDIT THIS ENUM!
 * =======================
 *
 * This enum was generated by the permissions_generator.rb script.
 * Should you wish to add a new IMQS V8 permission, follow the instructions
 * to regenerate this class at:
 *
 * https://imqssoftware.atlassian.net/wiki/display/ASC/Generating+Permissions
 */
	public enum Permissions {

ENUMS

	private final int code;
	private final String name;
	private final String description;

	Permissions(int code, String name, String description) {
		this.code = code;
		this.name = name;
		this.description = description;
	}

	public int getCode() {
		return code;
	}

	public String getName() {
		return name;
	}

	public String getDescription() {
		return description;
	}
}  

END

go_template = <<END
package imqsauth

import (
	"github.com/IMQS/authaus"
)

// ======================
// DO NOT EDIT THIS FILE!
// ======================
//
// This code was generated by the permissions_generator.rb script.
// Should you wish to add a new IMQS V8 permission, follow the instructions
// to regenerate this class at:
//
// https://imqssoftware.atlassian.net/wiki/display/ASC/Generating+Permissions
//
// IMQS permission bits (each number in the range 0..65535 means something)

const (
CONST
)

// Mapping from 16-bit permission integer to string-based name
var PermissionsTable authaus.PermissionNameTable

func init() {
	PermissionsTable = authaus.PermissionNameTable{}

	// It is better not to include the 'zero' permission in here, otherwise it leaks
	// out into things like an inverted map from permission name to permission number.

INIT
}
END

go_serviceauth_template = <<END
package permissions

// ======================
// DO NOT EDIT THIS FILE!
// ======================
//
// This code was generated by the permissions_generator.rb script.
// Should you wish to add a new IMQS V8 permission, follow the instructions
// to regenerate this class at:
//
// https://imqssoftware.atlassian.net/wiki/display/ASC/Generating+Permissions
//
// IMQS permission bits (each number in the range 0..65535 means something)

const (
CONST
)

// Exposing the permission table
var PermissionsTable map[int]string

func init() {
	PermissionsTable = make(map[int]string)
	
	// It is better not to include the 'zero' permission in here, otherwise it leaks
	// out into things like an inverted map from permission name to permission number.

INIT
}
END

typescript_template = <<END
/**
 * ======================
 * DO NOT EDIT THIS FILE!
 * ======================
 *
 * This permissions.ts file was generated by the permissions_generator.rb script.
 * Should you wish to add a new IMQS V8 permission, follow the instructions
 * to regenerate this class at:
 *
 * https://imqssoftware.atlassian.net/wiki/display/ASC/Generating+Permissions
 */
import { AuthModule } from './modules';

export class Permission {
	id: string;
	name: string;
	friendlyName: string;
	description: string;
	module: AuthModule;

	constructor(id: string, name: string, friendlyName: string, description: string, module: AuthModule) {
		this.id = id;
		this.name = name;
		this.friendlyName = friendlyName;
		this.description = description;
		this.module = module;
	}
}

// List of permissions in imqsauth project (search for 'PermissionsTable')
export const Permissions: { [key: string]: Permission } = {
ENUMS
};

/** @suppress {suspiciousCode} */
export let permissionsArray: Permission[];

// populate RoleArray
(function () {
	permissionsArray = [];
	for (const key in Permissions) {
		if (Permissions.hasOwnProperty(key)) {
			permissionsArray.push(Permissions[key]);
		}
	}
}());

export function getPermissionByID(id: string): Permission | undefined {
	return permissionsArray.find((permission) => { return id === permission.id; });
}
END

Generators = {
	"cpp_otaku" => {
		:template => cpp_otaku_template,
		:procs => {
			"ENUMS" => lambda { |enum, perm, islast| "\tImqsAuthPerm_#{camel_to_pascal(perm['v'])} = #{enum}#{islast ? '' : ','} // #{perm['d']}" }
		}
	},
	"cpp_aries" => {
		:template => cpp_aries_template,
		:procs => {
			"ENUMS" => lambda { |enum, perm, islast| "\t#{camel_to_pascal(perm['v'])} = #{enum}, // #{perm['d']}" }
		}
	},
	"java" => {
		:template => java_template,
		:procs => {
			"ENUMS" => lambda { |enum, perm, islast| enum == 0 ? "" : "\t#{camel_to_snake(perm['v']).upcase}(#{enum}, \"#{perm['n']}\", \"#{perm['d']}\")" + (islast ? ";" : ",") }
		}
	},
	"go" => {
		:template => go_template,
		:procs => {
			"CONST" => lambda { |enum, perm, islast| "\tPerm#{camel_to_pascal(perm['v'])} authaus.PermissionU16 = #{enum} // #{perm['d']}" },
			"INIT" => lambda { |enum, perm, islast| enum == 0 ? "" : "\tPermissionsTable[Perm#{camel_to_pascal(perm['v'])}] = \"#{perm['v'].downcase}\" // #{perm['d']}" }
		}
	},
	"go_serviceauth" => {
		:template => go_serviceauth_template,
		:procs => {
			"CONST" => lambda { |enum, perm, islast| "\tPerm#{camel_to_pascal(perm['v'])} = #{enum} // #{perm['d']}" },
			"INIT" => lambda { |enum, perm, islast| enum == 0 ? "" : "\tPermissionsTable[Perm#{camel_to_pascal(perm['v'])}] = \"#{perm['v'].downcase}\" // #{perm['d']}" }
		}
	},
	"typescript" => {
		:template => typescript_template,
		:procs => {
			"ENUMS" => lambda { |enum, perm, islast| enum == 0 ? "" : "\t#{perm['v']}: new Permission(\"#{enum}\", \"#{perm['v']}\", \"#{perm['n']}\", \"#{perm['d']}\", AuthModule.#{perm['m']})" + (islast ? "" : ",") }
		}
	}
}